/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/hvFPDDTiwz6
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Rubik } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"

export function GetSeatMap() {
  const [selectedSeat, setSelectedSeat] = useState(null)
  const [passengers, setPassengers] = useState([
    { id: 1, name: "John Doe", seat: null },
    { id: 2, name: "Jane Smith", seat: null },
    { id: 3, name: "Bob Johnson", seat: null },
  ])
  const seatLayout = [
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
    ["A", "B", "C", "D", "E", "F"],
  ]
  const handleSeatSelect = (row, col) => {
    const seatId = `${row}${seatLayout[row - 1][col]}`
    setSelectedSeat(seatId)
    setPassengers((prevPassengers) =>
      prevPassengers.map((passenger) => (passenger.id === 1 ? { ...passenger, seat: seatId } : passenger)),
    )
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto p-4 md:p-8">
      <div className="grid gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Flight Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-2">
              <div className="flex items-center justify-between">
                <div className="font-medium">Flight #AB123</div>
                <div className="text-sm bg-green-500 px-1 py-0.5 rounded-md text-foreground">On Time</div>
              </div>
              <div className="flex flex-row justify-between">
                <div className="flex flex-col gap-1">
                  <div className="text-sm text-muted-foreground">Departure</div>
                  <div className="flex items-center gap-2">
                    <div className="text-2xl font-medium">SFO</div>
                  </div>
                  <div>10:30 AM</div>
                </div>
                <div className="flex flex-col gap-1">
                  <div className="text-sm text-muted-foreground">Arrival</div>
                  <div className="flex items-center gap-2">
                    <div className="text-2xl font-medium">JFK</div>
                  </div>
                  <div>5:45 PM</div>
                </div>
              </div>
            </div>
          </CardContent>
          <Separator />
          <CardFooter className="flex items-center justify-between flex-row gap-16">
            <div className="text-sm text-muted-foreground">Duration: 7h 15m</div>
            <Button variant="outline" size="sm">
              View Details
            </Button>
          </CardFooter>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Booking Form</CardTitle>
          </CardHeader>
          <CardContent>
            <form className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="name">Name</Label>
                <Input id="name" placeholder="John Doe" />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" placeholder="john@example.com" />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="phone">Phone</Label>
                <Input id="phone" type="tel" placeholder="(123) 456-7890" />
              </div>
              <Button type="submit" size="lg">
                Book Flight
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
      <div className="grid gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Seat Map</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              {seatLayout.map((row, rowIndex) => (
                <div key={rowIndex} className="grid grid-cols-6 gap-2">
                  {row.map((col, colIndex) => {
                    const seatId = `${rowIndex + 1}${col}`
                    const isSelected = selectedSeat === seatId
                    const isOccupied = passengers.some((passenger) => passenger.seat === seatId)
                    let seatClass = "bg-muted text-muted-foreground"
                    if (isSelected) {
                      seatClass = "bg-primary text-primary-foreground"
                    } else if (isOccupied) {
                      seatClass = "bg-red-500 text-foreground"
                    }
                    return (
                      <button
                        key={seatId}
                        className={`rounded-md px-2 py-1 hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-2 focus:ring-primary ${seatClass}`}
                        onClick={() => handleSeatSelect(rowIndex + 1, colIndex)}
                      >
                        {seatId}
                      </button>
                    )
                  })}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Passengers</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="grid gap-4">
              {passengers.map((passenger) => (
                <li key={passenger.id} className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Avatar className="w-8 h-8 border">
                      <AvatarImage src="/placeholder-user.jpg" />
                      <AvatarFallback>{passenger.name.charAt(0).toUpperCase()}</AvatarFallback>
                    </Avatar>
                    <div>{passenger.name}</div>
                  </div>
                  <div
                    className={`rounded-md px-2 py-1 ${
                      passenger.seat ? "bg-green-500 text-foreground" : "bg-red-500 text-foreground"
                    }`}
                  >
                    {passenger.seat || "Unassigned"}
                  </div>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
